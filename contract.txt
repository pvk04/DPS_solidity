// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.2 <0.9.0;

contract DPS{
    // структура пользователя системы
    struct User{
        address userAddress; // адрес кошелька пользователя
        string fio; // имя пользователя
        bool isDPS; // true - сотрудник ДПС, false - не сотрудник
        bool isDriver; // true - водтель, false - не водитель
        uint carID; // айди машины из массива всех машин
        string driverLicenseID; // номер водительского удостоверения
        uint dtpAmount; // количество ДТП
        uint driverExpirienceYear; // год начала водительского стажа
        uint unpaidPenaltys; // количество неоплаченных штрафов
        uint insuranceFee; // страховой взнос
        Penalty[] penalties; // массив всех штрафов пользователя
    }

    // структура водительского удостоверения
    struct DriverLicense{
        uint driverID; // айди водителя, чье это удостоверение
        string termLicense; // строк действия водительского удостоверения
        uint category; // категория водительского удостоверения | 1 - A, 2 - B, 3 - C
    }

    // структура машины
    struct Car{
        uint ownerID; // айди владельца машины
        uint category; // категория прав для машины | 1 - A, 2 - B, 3 - C
        uint price; // рыночная стоимость
        uint yearsExpluatation; // количество лет эксплуатации
    }

    // структура штрафа
    struct Penalty{
        uint date; // дата (таймстамп)
        bool isPaid; // оплачен или нет
    }

    // структура запроса на выплату страховки
    struct InsuranceRequests{
        address user; // пользователь, которому нужно выплатить страховку
        uint insurancePrice; // сумма выплаты
        bool companyCantPay; // страховой компании не хватает денег
        bool isPaid; // статус выплаты. true - оплачено, false - не полачено
    }

    uint systemStartTimestamp; // Временная метка старта системы
    address payable Bank = payable(0xdD870fA1b7C4700F2BD7f44238821C26f7392148); // адрес кошелька банка
    address payable InsuranceCompany = payable(0x583031D1113aD414F02576BD6afaBfb302140225); // адрес кошелька страховой компании
    uint InsuranceCompanyDebt = 0; // долг страховой компании перед банком
    uint public OneDayValue = 5; // количество секунд, которые принимаются за 1 день
    User[] public users; // массив всех зарегистрированных в системе пользователей
    mapping(address => bytes32) userPasswords; // маппинг паролей зарегистрированных пользователей
    mapping(string => DriverLicense) public licenses; // мапинг водительских удостоверений
    Car[] public cars; // массив машин
    InsuranceRequests[] public requests; // массив запросов на выплату страховки

    constructor(){
        // Сотрудник ДПС
        User storage dpsWorker1 = users.push();
        // dpsWorker1.userAddress = ;
        dpsWorker1.fio = "Ivanov Ivan Ivanovich";
        dpsWorker1.isDPS = true;
        dpsWorker1.isDriver = true;
        dpsWorker1.driverExpirienceYear = 2;
        dpsWorker1.dtpAmount = 0;
        dpsWorker1.unpaidPenaltys = 0;
        // userPasswords[] =  0x64e604787cbf194841e7b68d7cd28786f6c9a0a3ab9f8b0a0e87cb4387ab0107; // 123

        // Водитель 1
        User storage driver1 = users.push();
        // driver1.userAddress = ;
        driver1.fio = "Semenov Semen Semenovich";
        driver1.isDPS = false;
        driver1.isDriver = true;
        driver1.driverExpirienceYear = 5;
        driver1.dtpAmount = 0;
        driver1.unpaidPenaltys = 0;
        // userPasswords[] =  0x64e604787cbf194841e7b68d7cd28786f6c9a0a3ab9f8b0a0e87cb4387ab0107; // 123 

        // Водитель 2
        User storage driver2 = users.push();
        // driver2.userAddress = ;
        driver2.fio = "Petrov Petr Petrovich";
        driver2.isDPS = false;
        driver2.isDriver = true;
        driver2.driverExpirienceYear = 10;
        driver2.dtpAmount = 3;
        driver2.unpaidPenaltys = 0;
        // userPasswords[] =  0x64e604787cbf194841e7b68d7cd28786f6c9a0a3ab9f8b0a0e87cb4387ab0107; // 123

        // Добавление водительских удостоверений
        DriverLicense storage license1 = licenses["000"];
        license1.category = 1;
        license1.termLicense = "11.01.2021";

        DriverLicense storage license2 = licenses["111"];
        license2.category = 2;
        license2.termLicense = "12.05.2025";

        DriverLicense storage license3 = licenses["222"];
        license3.category = 3;
        license3.termLicense = "09.09.2020";

        DriverLicense storage license4 = licenses["333"];
        license4.category = 1;
        license4.termLicense = "13.02.2027";

        DriverLicense storage license5 = licenses["444"];
        license5.category = 2;
        license5.termLicense = "10.09.2020";

        DriverLicense storage license6 = licenses["555"];
        license6.category = 3;
        license6.termLicense = "24.06.2029";

        DriverLicense storage license7 = licenses["666"];
        license7.category = 1;
        license7.termLicense = "31.03.2030";
    }

    // Функция для авторизации пользователя на интерфейсе. Принимает адрес пользователя и зашифрованный пароль. Возвращает итог сравнения зашифрованных паролей. 
    function login(address user, bytes32 password) public view returns(bool) {
        require(userPasswords[user] != bytes32(0), "You not registered");
        return userPasswords[user] == password;
    }

    // Функция для регистрации пользователя в системе. Принимает адрес, зашифрованный пароль и ФИО пользователя.
    function registration(address user, bytes32 password, string memory fio) public {
        require(userPasswords[user] == bytes32(0), "This address is taken");

        User storage newUser = users.push();
        newUser.userAddress = user;
        newUser.isDriver = true;
        newUser.isDPS = false;
        newUser.driverExpirienceYear = 0;
        newUser.dtpAmount = 0;
        newUser.fio = fio;
        newUser.unpaidPenaltys = 0;

        userPasswords[user] = password;
    }

    // Функция добавления водительских прав водителю. Принимает индекс пользователя в массиве, номер водительского удостоверения, срок действия водительского удостоверения и категорию удостоверения
    function registerDriverLicense(uint userID, string memory licenseNumber, string memory termLicense, uint categoryLicense) public {
        require(userID < users.length, "user ID is out of range");
        require(userPasswords[users[userID].userAddress] != bytes32(0), "User is not registered");
        require(keccak256(bytes(users[userID].driverLicenseID)) == keccak256(bytes("")), "You already have driver license");
        require(licenses[licenseNumber].category != 0, "This driver license is not in database");
        require(keccak256(bytes(licenses[licenseNumber].termLicense)) == keccak256(bytes(termLicense)), "License inforamtion is incorrect (date)");
        require(licenses[licenseNumber].category == categoryLicense, "License inforamtion is incorrect (category)");

        licenses[licenseNumber].driverID = userID;
        users[userID].driverLicenseID = licenseNumber;
    }

    // Функция добавления автомобиля водителю. Принимает индекс пользователя в массиве пользователей и индекс машины в массиве машин
    function registerCar(uint userID, uint carID) public {
        require(userID < users.length, "user ID is out of range");
        require(carID < cars.length, "car ID is out of range");
        require(licenses[users[userID].driverLicenseID].category == cars[carID].category, "Car category and your license category arent equal");
        
        cars[carID].ownerID = userID;
        users[userID].carID = carID;
    }

    // Функция для продления водительского удостоверения. Принимает индекс пользователя в массиве и новую дату окончания удостоверения
    function extendDriverLicense(uint userID, string memory newDate) public {
        require(msg.sender == users[userID].userAddress, "You cant extend somebodys license");
        require(users[userID].unpaidPenaltys != 0, "You have unpayed penaltys");
        // еще проверка, что текущая дата не больше, чем за месяц до окончания срока действия удостоверения

        licenses[users[userID].driverLicenseID].termLicense = newDate;
    }

    // Функция для расчета страхового взноса пользователя. Принимает индекс пользователя в массиве, возвращает страховой в веях
    function calculateInsurance(uint userID) public view returns(uint) {
        Car storage car = cars[users[userID].carID];
        User storage user = users[userID];

        int interimSettlement = 10 - int(car.yearsExpluatation);
        if (interimSettlement < 0){
            interimSettlement = -interimSettlement;
        }

        uint insuranceFee = car.price * uint(interimSettlement) + 2 * user.unpaidPenaltys * 10 + user.dtpAmount * 100 - 20 * user.driverExpirienceYear;

        return insuranceFee * 10 ** 18 / 100;
    }

    // Функция для оплаты страхового взноса пользователем. Принимает айди пользователя в массиве и списывает у него средаства в размере страхового взноса
    function payInsurance(uint userID) public payable {
        require(users[userID].insuranceFee == 0, "You already paid your insurance fee");
        require(msg.value == calculateInsurance(userID), "You dont have enough money"); 

        uint insurance = calculateInsurance(userID);

        if (InsuranceCompanyDebt >= insurance){ // если долг страховой больше или равен сумме взноса
            Bank.transfer(insurance);
            InsuranceCompanyDebt -= insurance;
        }
        else if (InsuranceCompanyDebt < insurance && InsuranceCompanyDebt > 0){ // если долг меньше взноса и больше 0
            uint rest = insurance - InsuranceCompanyDebt;
            Bank.transfer(InsuranceCompanyDebt);
            InsuranceCompany.transfer(rest);
        }
        else{ // если долг равен нулю
            InsuranceCompany.transfer(insurance);
        }
        users[userID].insuranceFee = insurance;
    }

    // Функция добавления штрафа водителю сотрудником ДПС. Приннимает номер водительского удостоверения
    function addPenalty(string memory licenseID) public {
        require(licenses[licenseID].category != 0, "This license isnt anybodys");

        users[licenses[licenseID].driverID].penalties.push(Penalty(block.timestamp, false));
        users[licenses[licenseID].driverID].unpaidPenaltys += 1;
    }

    // Функция для оплаты штрафа. Принимает индекс пользователя в массиве пользователей и индекс штрафа в массиве штрафов
    function payPenalty(uint userID, uint penaltyID) public payable {
        require(userID < users.length, "userId is out of range");
        require(penaltyID < users[userID].penalties.length, "userId is out of range");
        require(msg.sender == users[userID].userAddress, "You can pay only your penalties");
        require(users[userID].penalties[penaltyID].isPaid == false, "This penalty is already paid");

        if (users[userID].penalties[penaltyID].date + 5 * OneDayValue > block.timestamp){
            Bank.transfer(5 * 10 ** 18);
            users[userID].unpaidPenaltys -= 1;
        }
        else {
            Bank.transfer(10 * 10 ** 18);
            users[userID].unpaidPenaltys -= 1;
        }
    }

    // Функция добавления ДТП сотрудником ДПС (если у пользователя оплачен страховой взнос, то ему возвращается 10 кратный ее размер)
    function addDTP(string memory licenseID, uint senderID) public {
        require(users[senderID].userAddress == msg.sender, "Not registered or incorrect userID");
        require(users[senderID].isDPS == true, "You cant do this");
        require(keccak256(bytes(users[licenses[licenseID].driverID].driverLicenseID)) == keccak256(bytes(licenseID)), "It's someone else's driver's license");

        users[licenses[licenseID].driverID].dtpAmount += 1;
        if (users[licenses[licenseID].driverID].insuranceFee != 0){
            requests.push(InsuranceRequests(users[licenses[licenseID].driverID].userAddress, users[licenses[licenseID].driverID].insuranceFee * 10, false, false));
        }
    }

    // Функция перевода страховки пользователю, попавшему в ДТП. Принимает айди запроса
    function payInsuranceToUser(uint requestID) public payable {
        require(msg.sender == InsuranceCompany || msg.sender == Bank, "You cant do this");
        require(requests[requestID].isPaid == false, "This insurance is paid");

        if (msg.value >= requests[requestID].insurancePrice && msg.sender == InsuranceCompany) {
            payable(requests[requestID].user).transfer(requests[requestID].insurancePrice);
            requests[requestID].isPaid = true;
        } else if (msg.value < requests[requestID].insurancePrice && msg.sender == InsuranceCompany){
            requests[requestID].companyCantPay = true;
        }

        if (msg.sender == Bank && requests[requestID].companyCantPay == true){
            payable(requests[requestID].user).transfer(requests[requestID].insurancePrice);
            requests[requestID].isPaid = true;
            InsuranceCompanyDebt += requests[requestID].insurancePrice;
        }
    }
}
