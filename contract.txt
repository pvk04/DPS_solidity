// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.2 <0.9.0;

contract DPS{
    // структура пользователя системы
    struct User{
        address userAddress; // адрес кошелька пользователя
        string fio; // имя пользователя
        bool isDPS; // true - сотрудник ДПС, false - не сотрудник
        bool isDriver; // true - водтель, false - не водитель
        uint carID; // айди машины из массива всех машин
        uint driverLicenseID; // номер водительского удостоверения
        uint dtpAmount; // количество ДТП
        uint driverExpirienceYear; // год начала водительского стажа
        uint unpaidPenaltys; // количество неоплаченных штрафов
        uint insuranceFee; // страховой взнос
        Penalty[] penalties; // массив всех штрафов пользователя
    }

    // структура водительского удостоверения
    struct DriverLicense{
        uint driverID; // айди водителя, чье это удостоверение
        string termLicense; // строк действия водительского удостоверения
        uint category; // категория водительского удостоверения | 1 - A, 2 - B, 3 - C
    }

    // структура машины
    struct Car{
        uint ownerID; // айди владельца машины
        uint category; // категория прав для машины | 1 - A, 2 - B, 3 - C
        uint price; // рыночная стоимость
        uint yearsExpluatation; // количество лет эксплуатации
    }

    // структура штрафа
    struct Penalty{
        uint date; // дата (таймстамп)
        bool isPaid; // оплачен или нет
    }

    uint public OneDayValue = 5; // количество секунд, которые принимаются за 1 день
    User[] public users; // массив всех зарегистрированных в системе пользователей
    mapping(address => bytes32) userPasswords; // маппинг паролей зарегистрированных пользователей
    mapping(uint => DriverLicense) public licenses; // мапинг водительских удостоверений
    Car[] public cars; // массив машин

    constructor(){
        // address Bank = ; // адрес кошелька банка
        // address insuranceCompany = ; // адрес кошелька страховой компании

        // Сотрудник ДПС
        User storage dpsWorker1 = users.push();
        // dpsWorker1.userAddress = ;
        dpsWorker1.fio = "Ivanov Ivan Ivanovich";
        dpsWorker1.isDPS = true;
        dpsWorker1.isDriver = true;
        dpsWorker1.driverExpirienceYear = 2;
        dpsWorker1.dtpAmount = 0;
        dpsWorker1.unpaidPenaltys = 0;
        // userPasswords[] =  0x64e604787cbf194841e7b68d7cd28786f6c9a0a3ab9f8b0a0e87cb4387ab0107; // 123

        // Водитель 1
        User storage driver1 = users.push();
        // driver1.userAddress = ;
        driver1.fio = "Semenov Semen Semenovich";
        driver1.isDPS = false;
        driver1.isDriver = true;
        driver1.driverExpirienceYear = 5;
        driver1.dtpAmount = 0;
        driver1.unpaidPenaltys = 0;
        // userPasswords[] =  0x64e604787cbf194841e7b68d7cd28786f6c9a0a3ab9f8b0a0e87cb4387ab0107; // 123 

        // Водитель 2
        User storage driver2 = users.push();
        // driver2.userAddress = ;
        driver2.fio = "Petrov Petr Petrovich";
        driver2.isDPS = false;
        driver2.isDriver = true;
        driver2.driverExpirienceYear = 10;
        driver2.dtpAmount = 3;
        driver2.unpaidPenaltys = 0;
        // userPasswords[] =  0x64e604787cbf194841e7b68d7cd28786f6c9a0a3ab9f8b0a0e87cb4387ab0107; // 123

        //  0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6 - 1
    }

    //
    function login(address user, bytes32 password) public view returns(bool) {
        require(userPasswords[user] != bytes32(0), "You not registered");
        return userPasswords[user] == password;
    }

    // 
    function registration(address user, bytes32 password, string memory fio) public {
        require(userPasswords[user] == bytes32(0), "This address is taken");

        User storage newUser = users.push();
        newUser.userAddress = user;
        newUser.isDriver = true;
        newUser.isDPS = false;
        newUser.driverExpirienceYear = 0;
        newUser.dtpAmount = 0;
        newUser.fio = fio;
        newUser.unpaidPenaltys = 0;

        userPasswords[user] = password;
    }

    // Функция добавления водительских прав
    function registerDriverLicense(uint userID, uint licenseNumber, string memory termLicense, uint categoryLicense) public {
        require(userID < users.length, "user ID is out of range");
        require(userPasswords[users[userID].userAddress] != bytes32(0), "User is not registered");
        require(users[userID].driverLicenseID == 0, "You already have driver license");
        require(licenses[licenseNumber].category != 0, "This driver license is not in database");
        require(keccak256(bytes(licenses[licenseNumber].termLicense)) == keccak256(bytes(termLicense)), "License inforamtion is incorrect (date)");
        require(licenses[licenseNumber].category == categoryLicense, "License inforamtion is incorrect (category)");

        licenses[licenseNumber].driverID = userID;
        users[userID].driverLicenseID = licenseNumber;
    }

    // Функция добавления автомобиля водителю
    function registerCar(uint userID, uint carID) public {
        require(userID < users.length, "user ID is out of range");
        require(carID < cars.length, "car ID is out of range");
        require(licenses[users[userID].driverLicenseID].category == cars[carID].category, "Car category and your license category arent equal");
        
        cars[carID].ownerID = userID;
        users[userID].carID = carID;
    }

    //
    // function extendDriverLicense(){}

    //
    // function payPenalty() {}

    //
    function calculateInsurance(uint userID) public view returns(uint) {
        Car storage car = cars[users[userID].carID];
        User storage user = users[userID];

        uint interimSettlement;
        if (1-int(car.yearsExpluatation)/10 < 0){
            interimSettlement = uint(1-int(car.yearsExpluatation)/10 * (-1));
        }

        uint insuranceFee = car.price * uint(interimSettlement)/10 + user.unpaidPenaltys/20 + user.dtpAmount - user.driverExpirienceYear/20;

        return insuranceFee;
    }

    //
    // function createInsurance(uint userID) public {

    // }

    //
    // function addPenalty(){}

    //
    // function addDTP(){}

    function returnNull(uint price, uint Years, uint unpaidPenaltys, uint dtpAmount, uint driverExpirienceYear) public view returns(int){
        uint interimSettlement;
        if (1-int(Years)/10 < 0){
            interimSettlement = uint(1-int(Years)/10 * (-1));
        }

        return int(price * uint(interimSettlement)/10 + unpaidPenaltys/5 + dtpAmount - driverExpirienceYear/5);
    }

}